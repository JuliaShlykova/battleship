{"version":3,"sources":["components/Cell.js","components/Board.js","units/ship.js","units/gameboard.js","components/Main.js","App.js","index.js"],"names":["Cell","index","boardCell","boardName","receiveAttack","ship","isHit","console","log","className","isSunk","onClick","Board","gameboard","announce","name","cells","i","push","constCells","Ship","length","position","hits","hit","every","elem","includes","Gameboard","board","sunkShips","init","getBoard","placeShip","allShipsSunk","n","randomShipPosition","occupiedCells","possibleInitialPosition","j","arr","k","some","el","initialPoint","Math","floor","random","point","constructGameboard","shipsPlacement","Main","useState","playerBoard","setPlayerBoard","computerBoard","setComputerBoard","playerJustBoard","setPlayerJustBoard","computerJustBoard","setComputerJustBoard","playerAnnounce","setPlayerAnnounce","computerAnnounce","setComputerAnnounce","winner","setWinner","useEffect","freeBoard","map","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a04c3507.chunk.js","sourcesContent":["const Cell = ({index, boardCell, boardName, receiveAttack=()=>{}}) => {\n  const {ship, isHit} = boardCell;\n\n  console.log('rendering cells')\n\n  const attack = () => {\n    console.log('cell is atacked');\n    receiveAttack(boardName, index);\n    console.log('ship: ', ship, 'isHit: ', isHit);\n  }\n\n  return (\n    <div className={`cell \n    ${(isHit)?'':'cell-active'} \n    ${ship?'cell-ship':''}\n    ${(ship&&ship.isSunk())?'cell-sunk':''}` \n    }\n    index={index} \n    onClick={(isHit||(boardName==='player-board'))?null:attack}\n    >\n      {(!ship&&isHit)?<div className=\"cell-missed\"></div>:null}\n      {(ship&&isHit)?<div className=\"cell-hit\"></div>:null}\n    </div>\n  )\n}\n\nexport default Cell;","import './style/Board.css';\nimport Cell from './Cell';\n\nconst Board = ({boardName, gameboard, receiveAttack, announce}) => {\n\n  const constCells = () => {\n    let cells = []; \n    for (let i=0;i<100;i++) {\n      cells.push(<Cell \n      key={i} \n      index={i} \n      boardName={boardName}\n      boardCell={gameboard[i]} \n      receiveAttack={receiveAttack}/>)\n    }\n    return cells;\n  }\n\n  return (\n    <div>\n      <p>{announce}</p>\n      <div className=\"board\" name={boardName}>\n        {constCells()}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Board;","const Ship = (length, position) => {\n  let hits = [];\n  const hit = (index) =>  {\n    hits.push(index);\n  };\n  const isSunk = () => {\n    return position.every(elem => hits.includes(elem));\n  };\n  return {length, position, hits, hit, isSunk};\n}\n\nexport default Ship;","import Ship from './ship';\n\nconst Gameboard = () => {\n  let board, sunkShips;\n\n  const init = () => {\n    board = [];\n    sunkShips = 0;\n    for (let i = 0; i<100; i++) {\n      board.push({\n        ship: false,\n        isHit: false\n      });\n    };\n  }\n\n  const getBoard = () => board;\n\n  const placeShip = (length, position) => {\n    const ship = Ship(length, position);\n    for(let i of position) {\n      board[i].ship = ship;\n    };\n  };\n\n  const allShipsSunk = (n) => {\n    return (sunkShips === n) ? true : false;\n  }\n\n  const receiveAttack = (index) => {\n    board[index].isHit = true;\n    if(board[index].ship) {\n      board[index].ship.hit(index);\n      if(board[index].ship.isSunk()) {\n        sunkShips+=1;\n        return 'Ship is sunk!';\n      };\n      return 'Ship is hit!';\n    };\n    return 'Miss!';\n  };\n\n  return {init, getBoard, placeShip, allShipsSunk, receiveAttack}\n};\n\nexport default Gameboard;","import Board from \"./Board\";\nimport Gameboard from \"../units/gameboard\";\nimport { useState, useEffect } from \"react\";\n\nconst randomShipPosition = (length, occupiedCells=[]) => {\n  let possibleInitialPosition = [];\n    for (let i=10-length;i<=99;i+=10){\n      let j=i+length-10;\n      while (j<=i) {\n        if (!(occupiedCells.includes(j))) {\n          //checking if possible ship would be placed on occupied cells\n          let arr = [j+1];\n          let k = j+2;\n          while (k-j<length){\n            arr.push(k);\n            k++;\n          }\n          if(arr.some(el => occupiedCells.includes(el))){\n            j++;\n            continue;\n          }\n          possibleInitialPosition.push(j);\n        }\n        j++;\n      }\n    }\n    let initialPoint = possibleInitialPosition[Math.floor(Math.random()*possibleInitialPosition.length)];\n    let point = initialPoint;\n    let position = [];\n    while(point-initialPoint<=length-1){\n      position.push(point);\n      point++;\n    }\n    return position;\n}\n\nconst shipsPlacement = (gameboard) => {\n  const shipsLength = [5,4,3,3,2];\n  let occupiedCells = []\n  for (let length of shipsLength) {\n    //all x-axis\n    let position = randomShipPosition(length, occupiedCells);\n    for (let i=0;i<length;i++) {\n      occupiedCells.push(position[i]);\n      //push all nearby cells\n      if (position[i]-10>=0) {\n        occupiedCells.push(position[i]-10);\n      }\n      if (position[i]+10<=99){\n        occupiedCells.push(position[i]+10);\n      }\n      if ((i===0)&&((position[i])%10!==0)) {\n        occupiedCells.push(position[i]-1);\n        if(position[i]+10-1<=99) {\n          occupiedCells.push(position[i]+10-1);\n        }\n        if(position[i]-10-1>=0) {\n          occupiedCells.push(position[i]-10-1);\n        }\n      }\n      if ((i===length-1)&&((position[i])%10!==9)) {\n        occupiedCells.push(position[i]+1);\n        if(position[i]+10+1<=99) {\n          occupiedCells.push(position[i]+10+1);\n        }\n        if(position[i]-10+1>=0) {\n          occupiedCells.push(position[i]-10+1);\n        }\n      }\n    }\n    gameboard.placeShip(length, position);\n  }\n}\n\nconst constructGameboard = () => {\n  let gameboard = Gameboard();\n  gameboard.init();\n  shipsPlacement(gameboard);\n  return gameboard;\n}\n\nconst Main = () => {\n  const [playerBoard, setPlayerBoard] = useState(constructGameboard());\n  const [computerBoard, setComputerBoard] = useState(constructGameboard());\n  const [playerJustBoard, setPlayerJustBoard] = useState([...playerBoard.getBoard()]);\n  const [computerJustBoard, setComputerJustBoard] = useState([...computerBoard.getBoard()]);\n  const [playerAnnounce, setPlayerAnnounce] = useState('Waiting...');\n  const [computerAnnounce, setComputerAnnounce] = useState('Waiting...');\n  const [winner, setWinner] = useState('No winner');\n  \n  console.log('constructing main');\n\n  const init = () => {\n    setPlayerBoard(constructGameboard());\n    setComputerBoard(constructGameboard());\n    setWinner('No winner');\n  }\n\n  useEffect(() => {\n    setPlayerJustBoard([...playerBoard.getBoard()]);\n    setPlayerAnnounce('Waiting...');\n  }, [playerBoard]);\n\n  useEffect(() => {\n    setComputerJustBoard([...computerBoard.getBoard()]);\n    setComputerAnnounce('Waiting...');\n  }, [computerBoard]);\n\n  const receiveAttack = (boardName, index) => {\n    if (boardName==='player-board') {\n      setPlayerAnnounce(playerBoard.receiveAttack(index));\n      setPlayerJustBoard([...playerBoard.getBoard()]);\n      if (playerBoard.allShipsSunk(5)) {\n        setWinner('Computer won');\n      }\n    } else {\n      setComputerAnnounce(computerBoard.receiveAttack(index));\n      setComputerJustBoard([...computerBoard.getBoard()]);\n      if (computerBoard.allShipsSunk(5)) {\n        setWinner('You won');\n      }\n      let freeBoard = playerJustBoard.map((el,i) => i).filter(i => !playerJustBoard[i].isHit);\n      let i = freeBoard[Math.floor(Math.random()*freeBoard.length)];\n      receiveAttack('player-board',i);\n    }\n  }\n\n  return (\n    <main>\n      <h1>{winner}</h1>\n      <div className=\"boards-zone\">\n        <Board boardName=\"player-board\" gameboard={playerJustBoard} receiveAttack={receiveAttack} announce={playerAnnounce} />\n        <Board boardName=\"computer-board\" gameboard={computerJustBoard} receiveAttack={receiveAttack} announce={computerAnnounce} />\n      </div>\n      <button onClick={init}>New Game</button>\n    </main>\n  )\n}\n\nexport default Main;","import './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span>Battleship</span>\n      <Main />    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}